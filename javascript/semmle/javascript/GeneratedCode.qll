// Copyright 2017 Semmle Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the License for the specific language governing
// permissions and limitations under the License.

/**
 * A library for detecting generated code.
 */

import javascript
import semmle.javascript.frameworks.Bundling
import semmle.javascript.frameworks.Emscripten
import semmle.javascript.frameworks.GWT
import semmle.javascript.SourceMaps

/**
 * A comment that marks generated code.
 */
abstract class GeneratedCodeMarkerComment extends Comment {
}

/**
 * Source mapping comments mark generated code.
 */
library class SourceMappingCommentMarkerComment extends GeneratedCodeMarkerComment {
  SourceMappingCommentMarkerComment() {
    this instanceof SourceMappingComment
  }
}

/**
 * Marker comments left by specific code generators.
 */
library class CodeGeneraterMarkerComment extends GeneratedCodeMarkerComment {
  CodeGeneraterMarkerComment() {
    exists (string tool |
      tool = "js_of_ocaml|CoffeeScript|LiveScript|dart2js|ANTLR|PEG\\.js" and
      this.(SlashSlashComment).getText().regexpMatch("\\s*Generated (from .*)?by (" + tool + ")\\b.*")
    )
  }
}

/**
 * Generic generated code marker comment.
 */
library class GenericGeneratedCodeMarkerComment extends GeneratedCodeMarkerComment {
  GenericGeneratedCodeMarkerComment() {
    exists (string line | line = getLine(_) |
      exists (string entity, string was, string automatically |
        entity = "code|file|class|interface|art[ei]fact|module|script" and
        was = "was|is|has been" and
        automatically = "automatically |mechanically |auto[- ]?" and
        line.regexpMatch("(?i).*\\b(This|The following) (" + entity + ") (" + was + ") (" + automatically + ")?gener(e?)ated\\b.*")
      )
    )
  }
}

/**
 * Comment warning against modifications.
 */
library class DontModifyMarkerComment extends GeneratedCodeMarkerComment {
  DontModifyMarkerComment() {
    exists (string line | line = getLine(_) |
      line.regexpMatch("(?i).*\\bGenerated by\\b.*\\bDo not edit\\b.*") or
      line.regexpMatch("(?i).*\\bAny modifications to this file will be lost\\b.*")
    )
  }
}

/**
 * Does `tl` look like it contains generated code?
 */
predicate isGenerated(TopLevel tl) {
  tl.isMinified() or
  isBundle(tl) or
  tl instanceof GWTGeneratedTopLevel or
  exists (GeneratedCodeMarkerComment gcmc | tl = gcmc.getTopLevel())
}

/**
 * Does `file` look like it contains generated code?
 */
predicate isGeneratedCode(File file) {
  isGenerated(file.getATopLevel())
}