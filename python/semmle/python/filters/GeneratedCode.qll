// Copyright 2018 Semmle Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied. See the License for the specific language governing
// permissions and limitations under the License.

import python
import semmle.python.templates.Templates

/**
 * A file that is detected as being generated.
 */
abstract class GeneratedFile extends File {

    abstract string getTool();
  
}

library class GenericGeneratedFile extends GeneratedFile {
  
    GenericGeneratedFile() {
        (generated_by(this, _) or generated_from(this, _)) 
        and 
        dont_modify(this)
        and
        not this instanceof SpecificGeneratedFile
    }

    string getTool() {
        generated_by(this, result)
    }

}

private string comment_or_docstring(File f) {
    exists(Comment c | c.getLocation().getFile() = f | 
        result = c.getText()
    )
    or
    exists(Module m | m.getFile() = f |
        result = m.getDocString().getText()
    )

}

private predicate generated_by(File f, string tool) {
    exists(string comment | comment = comment_or_docstring(f) |
        tool = comment.regexpCapture("(?is).*\\b(?:(?:auto[ -]?)?generated|created automatically) by (?:the )?([-/\\w.]+[-/\\w]).*", 1)
    )
}

private predicate generated_from(File f, string src) {
     exists(string comment | comment = comment_or_docstring(f) |
        src = comment.regexpCapture("(?is).*\\b((?:auto[ -]?)?generated|created automatically) from ([-/\\w.]+[-/\\w]).*", 1)
      )
}

private predicate dont_modify(File f) {
     comment_or_docstring(f).regexpMatch("(?is).*\\b(Do not|Don't) (edit|modify|make changes)\\b.*")
}


/** 
 * A file generated by a template engine 
 */
abstract library class SpecificGeneratedFile extends GeneratedFile {
    /* Currently cover Spitfire, Pyxl and Mako.
     *  Django templates are not compiled to Python.
     *  Jinja2 templates are compiled direct to bytecode via the ast.
     */
}

/** File generated by the spitfire templating engine */
class SpitfireGeneratedFile extends SpecificGeneratedFile {
  
    SpitfireGeneratedFile() {
        exists(Module m | 
            m.getFile() = this and not m instanceof SpitfireTemplate |
            exists(ImportMember template_method, ImportExpr spitfire_runtime_template |
                spitfire_runtime_template.getName() = "spitfire.runtime.template" and
                template_method.getModule() = spitfire_runtime_template and
                template_method.getName() = "template_method"
            )
        )
    }

    string getTool() {
        result = "spitfire" 
    }

}

/** File generated by the pyxl templating engine */
class PyxlGeneratedFile extends SpecificGeneratedFile {
 
    PyxlGeneratedFile() {
        this.getSpecifiedEncoding() = "pyxl"
    }

    string getTool() {
        result = "pyxl" 
    }
    
}

/** File generated by the mako templating engine */
class MakoGeneratedFile extends SpecificGeneratedFile {

    MakoGeneratedFile() {
        exists(Module m | m.getFile() = this |
            from_mako_import(m) = "runtime" and
            from_mako_import(m) = "filters" and
            from_mako_import(m) = "cache" and
            exists(Assign a, Name n |
                a.getScope() = m and a.getATarget() = n and n.getId() = "__M_dict_builtin"
            ) and
            exists(Assign a, Name n |
                a.getScope() = m and a.getATarget() = n and n.getId() = "__M_locals_builtin"
            ) and
            exists(Assign a, Name n |
                a.getScope() = m and a.getATarget() = n and n.getId() = "_magic_number"
            ) 
        )
    }

    string getTool() {
        result = "mako" 
    }

}

string from_mako_import(Module m) {
    exists(ImportMember member, ImportExpr mako |
        member.getScope() = m and
        member.getModule() = mako and
        mako.getName() = "mako" |
        result = member.getName()  
    )
}

/** File generated by Google's protobuf tool. */
class ProtobufGeneratedFile extends SpecificGeneratedFile {
  
    ProtobufGeneratedFile() {
        this.getName().regexpMatch(".*_pb2?.py")
        and 
        exists(Module m |
            m.getFile() = this |
            exists(ImportExpr imp | 
                imp.getEnclosingModule() = m |
                imp.getImportedModuleName() = "google.net.proto2.python.public"
            )
            and
            exists(AssignStmt a, Name n |
                a.getEnclosingModule() = m and
                a.getATarget() = n and
                n.getId() = "DESCRIPTOR"
            )
        )
    }

    string getTool() {
        result = "protobuf" 
    }

}
